@article{Mckay_2010,
    author = {Mckay, Robert I. and Hoai, Nguyen Xuan and Whigham, Peter Alexander and Shan, Yin and O'Neill, Michael},
    title = {Grammar-Based Genetic Programming: A Survey},
    year = {2010},
    issue_date = {September 2010},
    publisher = {Kluwer Academic Publishers},
    address = {USA},
    volume = {11},
    number = {3–4},
    issn = {1389-2576},
    url = {https://doi.org/10.1007/s10710-010-9109-y},
    doi = {10.1007/s10710-010-9109-y},
    abstract = {Grammar formalisms are one of the key representation structures in Computer Science. So it is not surprising that they have also become important as a method for formalizing constraints in Genetic Programming (GP). Practical grammar-based GP systems first appeared in the mid 1990s, and have subsequently become an important strand in GP research and applications. We trace their subsequent rise, surveying the various grammar-based formalisms that have been used in GP and discussing the contributions they have made to the progress of GP. We illustrate these contributions with a range of applications of grammar-based GP, showing how grammar formalisms contributed to the solutions of these problems. We briefly discuss the likely future development of grammar-based GP systems, and conclude with a brief summary of the field.},
    journal = {Genetic Programming and Evolvable Machines},
    month = {sep},
    pages = {365–396},
    numpages = {32},
    keywords = {Regular, Tree adjoining, Evolutionary computation, Grammar, Genetic programming, Context free}
}

@article{montana_strongly_1995,
	title = {Strongly {Typed} {Genetic} {Programming}},
	volume = {3},
	url = {http://web.archive.org/web/20070814014654/http://vishnu.bbn.com/papers/stgp.pdf},
	abstract = {Genetic programming is a powerful method for automatically generating computer programs via the process of natural selection (Koza, 1992). However, in its standard form, there is no way to restrict the programs it generates to those where the functions operate on appropriate data types. In the case when the programs manipulate multiple data types and contain functions designed to operate on particular data types, this can lead to unnecessarily large search times and/or unnecessarily poor generalization performance. Strongly typed genetic programming (STGP) is an enhanced version of genetic programming which enforces data type constraints and whose use of generic functions and generic data types makes it more powerful than other approaches to type constraint enforcement. After describing its operation, we illustrate its use on problems in two domains, matrix/vector manipulation and list manipulation, which require its generality. The examples are: (1) the multi-dimensional least-squares regression problem, (2) the multi-dimensional Kalman ﬁlter, (3) the list manipulation function NTH, and (4) the list manipulation function MAPCAR.},
	number = {2},
	journal = {Evolutionary Computation},
	author = {Montana, David J.},
	year = {1995},
	keywords = {self\_organizing, evolution, algorithm, emergence, optimization, gp},
	pages = {199--230},
	annote = {See also July 1993 BBN Technical Report \#7866 of the same name – http://www.citeulike.org/user/numata/article/219660},
}


@article{Reynolds2011,
    author = {Reynolds, Craig},
    title = "{Interactive Evolution of Camouflage}",
    journal = {Artificial Life},
    volume = {17},
    number = {2},
    pages = {123-136},
    year = {2011},
    month = {04},
    abstract = "{This article presents an abstract computation model of the evolution of camouflage in nature. The 2D model uses evolved textures for prey, a background texture representing the environment, and a visual predator. A human observer, acting as the predator, is shown a cohort of 10 evolved textures overlaid on the background texture. The observer clicks on the five most conspicuous prey to remove (“eat”) them. These lower-fitness textures are removed from the population and replaced with newly bred textures. Biological morphogenesis is represented in this model by procedural texture synthesis. Nested expressions of generators and operators form a texture description language. Natural evolution is represented by genetic programming (GP), a variant of the genetic algorithm. GP searches the space of texture description programs for those that appear least conspicuous to the predator.}",
    issn = {1064-5462},
    doi = {10.1162/artl_a_00023},
    url = {https://doi.org/10.1162/artl\_a\_00023},
    eprint = {},
}